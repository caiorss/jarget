#+TITLE:  Jarget - Java Platform Command Line Toolbox
#+AUTHOR:   Caio Rodrigues - caiorss.rodrigues@gmail.com 
#+DESCRIPTION: Command line toolbox for java platform, scala automation and dependency manager. 
#+KEYWORDS: jarget jar tool java scala automation deployment toolbox uber fatjar 
#+STARTUP: content
#+INFOJS_OPT: view:info toc:t ltoc:t ftoc:nil mouse:underline button:nil path:theme/org-info.js
#+HTML_HEAD: <link href="style.css" rel="stylesheet"> 

* Jarget 
** Overview 

Jarget is a command line application to download java libraries or jar
files from Maven Central in a easy and fast way without the need to
set up a project. It is useful to experiment java libraries with
languages hosted in JVM such as Jython (Python implemented in Java),
Scala or Clojure. 

 - [[https://github.com/caiorss/jarget/][Jarget Repository]]

 - [[https://caiorss.github.io/jarget][Jarget Website]]

*Features:* 

 + Download Scala and Java libraries from https://mvnrepository.com/
   without creating a project. It is useful for quick experiments and
   library evaluation.

 + Display information about Java packages.

 + Start Scala with all jar files from directory loaded in Classpath.

 + Run scala compiler with all jars from some directory in classpath.

 + Parallallel download of dependencies.

 + Inspect and extract data from jar files.

   + Show MANIFEST

   + Display files

   + Show assets

   + Extract files 

 + Build uber jar, jar file bundled with all dependencies making
   deployment and distribution easier.

 + Build self-exectutable *nix uber jar file that can be run with ./application

** Use Case Example 

Evaluation of Scala cats library, based on [[https://medium.com/@abu_nadhr/scala-cats-library-for-dummies-part-1-8ec47af7a144][Scala Cats library for dummies — part 1]]

Jarget allows evaluation of Scala libraries without the need to
create a project or complicated Maven directory structure. 

Instead of creating a SBT project with:

#+BEGIN_SRC text
libraryDependencies += "org.typelevel" %% "cats" % "0.7.2"
#+END_SRC

It is possible to: 

 1. Get information about the library. Note: 2.11 is the Scala version.

#+BEGIN_SRC sh 
$ jarget mvn -show org.typelevel/cats_2.11/0.7.2
Package:         catsJVM
Packaging:       jar
Coordinates[1]:  group = org.typelevel artifact = cats_2.11 version = 0.7.2
Coordinates[2]:  org.typelevel/cats_2.11/0.7.2
Url:             https://github.com/typelevel/cats
Description:     catsJVM

Dependencies:

  - org.scala-lang/scala-library/2.11.8

  - org.typelevel/cats-macros_2.11/0.7.2

  - org.typelevel/cats-kernel_2.11/0.7.2

  - org.typelevel/cats-kernel-laws_2.11/0.7.2

  - org.typelevel/cats-core_2.11/0.7.2

  - org.typelevel/cats-laws_2.11/0.7.2

  - org.typelevel/cats-free_2.11/0.7.2

  - org.typelevel/cats-jvm_2.11/0.7.2

  - com.github.mpilquist/simulacrum_2.11/0.8.0

  - org.typelevel/machinist_2.11/0.4.1

#+END_SRC

 2. Install it and run with: 

Load Scala REPL with all jars from ./lib in classpath and test the
package: 

#+BEGIN_SRC sh 
$ jarget exec org.typelevel/cats-core_2.12/0.9.0 -- scala 
Welcome to Scala 2.12.3 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_144).
Type in expressions for evaluation. Or try :help.

scala> 
scala> import cats._, cats.instances.all._ 
import cats._
import cats.instances.all._

scala> val len: String => Int = _.length
len: String => Int = $$Lambda$1089/1057262726@255d9277

scala> Functor[List].map(List("scala", "cats")) (len)
res0: List[Int] = List(5, 4)

scala> 

#+END_SRC

** User Guide
*** Info commans 
**** Show version 
 
 - =$ jarget -v= or =$ jarget -version= 

#+BEGIN_SRC sh 
$ jarget -v
2.2.0-beta
#+END_SRC

**** Show user help 

 - =$ jarget=

#+BEGIN_SRC text 
  $ jarget
  jarget 2.2.0-beta -  Java platform Toolbox
  General
  -----------------------------------------------------------------

   -h              - show help
   -v | -version   - show version
   -site           - Open jarget github repository in the web browser.

  Maven Packages / Jar Packages
  -----------------------------------------------------------------

   mvn -show <pack>                      - Show package's information

   mvn -pom  <pack>                      - Show package's pom file

   mvn -pull <pack1,pack2,pack3...>      - Download package and dependencies to cache directory.

   mvn -copy <pack1,pack2,pack3..>       -  Copy packages from cache to ./lib downloading them if
                                            they are not available.


   mvn -search   <query>                 - Search a package in search.maven.org, opening results in
                                           the browser.

   mvn -search2  <query>                 - Search a package showing results in the console. (Experimental)

   mvn -browse <package>                 - Open package official website.

   mvn -open                             - Open web site https://mvnrepository.com
   mvn -open <package>                   - Open package mvnrepository url.


   mvn -clear                            - Clear package cache by removing all packages in cache directory.


   Cache Control
  -----------------------------------------------------------------

   cache -path                            - Show cache directory path (directory ~/.jarget/cache)
   cache -jars                            - Show all jar files in cache directory.
   cache -pack                            - Show all packages available in the cache
   cache -pack <pack>                     - Show all versions of a given package in the cache.


   Jar Files Inspection
  -----------------------------------------------------------------


   jar -man  <jar>                    - Show manifest.
   jar -main <jar>                    - Show main class.
   jar -show <jar>                    - Show all files.

   jar -resource <jar>                - Show all asset/resource files disregarding *.class files.
   jar -resource <jar> <file>         - Print content of resource file.

   jar -extract <jar> <file>          - Extract <file> from <jar> package to current directory.
   jar -extract <jar> <file> <path>   - Extract <file> from <jar> package to <path> directory.

   jar -extract-all <jar> <path>      - Extract all files from jar package to <path> directory.

   jar -extract-all <jar>             - Extract jar file to directory with same name of jar file
                                        at current directory. If file is lib/chart.jar it will
                                        extracted to ./chart

   jar -package <jar>                - Show all packages(aka namespaces) of classes within a jar file.
   jar -package <jar> <package>      - Show all classes of within a particular package.


  Uber Jar
  -----------------------------------------------------------------

   - Convert a jar file into a unix executable jar file
     that can be run with ./app.sh instead of java -jar app.jar

   $ ./jarget uber -exjar app.jar app.sh

   $ ./jarget uber -exjar app.jar   # Gnerates ./app

   - Build an scala uber jar named output.jar from main.jar which
     contains the main class and lib1 and lib2 are the directories
     containing jar files. It bundles the scala-library.jar runtime with
     the application.

   $ ./jarget uber -scala -o output.jar -m main.jar

   $ ./jarget uber -scala -o output.jar -m main.jar -jd ./lib1 ./lib2

   $ ./jarget uber -scala -sh -o output.jar -m main.jar -jd ./lib1 -j dependency1.jar -r ./resources1 ./res
  ources2

   uber <command>

     -o <output file>         - (mandatory) Output jar file bundled with all dependencies.
     -m <main jar file>       - (optional)  Jar file containing main class.
     -p <pack1> <pack2> ...   - (optional)  Packages int the format <group>/<artifact>/<version>
     -j <jar1.jar> <jar2.jar> - (optional)  Single jar files that will be included in the uber jar.
     -jd <dir1> <dir2> ...    - (optional)  Directories containing jar files that will be included in the u
  ber jar.
     -r <dir1> <dir2> ...     - (optional)  Directories containing resource files
     -scala                   - (optional)  Bundles the scala-library.jar file with the uber.jar
     -sh                      - (optional)  Makes the jar file as a self-executable Unix app.


  Classpath
  -----------------------------------------------------------------

   cpath -show                        - Get classpath from ./lib directory
   cpath -show <path]                 - Get classpath from <path] directory


  Exec
  -----------------------------------------------------------------

   exec <pack1,pack2...> -- <program> <arg1> <arg2>  - Executes a program passing classpath (-cp) flag with
                                                       classpath of packages <pack1,pack2,..> separated by
  comma.


  Utilities
  -----------------------------------------------------------------

   utils -env                    - Show environment variables in tabular format
   utils -env [var]              - Show environment variable [var]
   utils -path                   - Show PATH environment variable
   utils -prop                   - Show java properties in tabular format
   utils -expath [program]       - Show absolute path of a program in PATH variable

   utils -info                   - Show Platform Information - such as number of processors,
                                   system default econding such as UTF-8, path separator and etc.

  Crypto Hash Functions
  -----------------------------------------------------------------

   - Computes the file hash hex digest.
   digest -md5    -f <file>
   digest -sha1   -f <file>
   digest -sha256 -f <file>

   - Checks the file hex digest.
   digest -md5    -f <file>  <digest>
   digest -sha1   -f <file>  <digest>
   digest -sha256 -f <file>  <digest>

   - Computes the string hex digest.
   digest -md5    -s <string>
   digest -sha1   -s <string>
   digest -sha256 -s <string>

   - Checks the string hex digest.
   digest -md5    -s <string>  <digest>
   digest -sha1   -s <string>  <digest>
   digest -sha256 -s <string>  <digest>

  -----------------------------------------------------------------

  Note: <package> is <group>/<artifact>/<version>.
  Examples of valid packages:

    - org.scalaz/scalaz-core_2.11/7.3.0-M15

    - org.jfree/jfreechart/1.0.17
#+END_SRC

**** Open jarget website 

Open jarget github web site. 

 - =$ jarget -site=

*** Maven / Packages Commands
**** Show package information 

 - =$ jarget mvn -show org.jfree/jfreechart/1.0.17=

#+BEGIN_SRC sh 
  $ jarget mvn -show org.jfree/jfreechart/1.0.17
  Package:         JFreeChart
  Packaging:       jar
  Coordinates[1]:  group = org.jfree artifact = jfreechart version = 1.0.17
  Coordinates[2]:  org.jfree/jfreechart/1.0.17
  Url:             http://www.jfree.org/jfreechart/
  Description:     
      JFreeChart is a class library, written in Java, for generating charts. 
      Utilising the Java2D APIs, it currently supports bar charts, pie charts, 
      line charts, XY-plots and time series plots.
      

  Dependencies:

    - org.jfree/jcommon/1.0.21

    - xml-apis/xml-apis/1.3.04

#+END_SRC
**** Show package's POM file 

 - =$ jarget mvn -pom org.jfree/jfreechart/1.0.17=

#+BEGIN_SRC sh 
$ jarget -pom org.jfree/jfreechart/1.0.17

<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  ... 

    <modelVersion>4.0.0</modelVersion>

    <name>JFreeChart</name>

    <artifactId>jfreechart</artifactId>
    <groupId>org.jfree</groupId>
    <version>1.0.17</version>
    <packaging>jar</packaging>

    
    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <organization>
        <name>JFree.org</name>
        <url>http://www.jfree.org/</url>
    </organization>
    <inceptionYear>2001</inceptionYear>

    <description>
    JFreeChart is a class library, written in Java, for generating charts. 
    Utilising the Java2D APIs, it currently supports bar charts, pie charts, 
    line charts, XY-plots and time series plots.
    </description>

... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.source.level>1.6</project.source.level>
        <project.target.level>1.6</project.target.level>
    </properties>
</project>

#+END_SRC
**** Open package Maven URL 
 
 = =$ jarget mvn -open org.jfree/jfreechart/1.0.17= 

It will open the Mvn site of the package JFreeChart or:
 - https://mvnrepository.com/artifact/org.jfree/jfreechart/1.0.17  

**** Open https://mvnrepository.com/

Open website: https://mvnrepository.com/ that is useful for searching
packages.

  - =$ jarget mvn -open=

**** Install packages in the cache 

This command installs/downloads all packages to jarget cache directory: file:~/.jarget/cache

 - =jarget mvn -pull <pack1,pack2,pack3...>=

Example: Get teh packages org.jfree/jfreechart/1.0.17 and org.scalaz/scalaz-core_2.11/7.3.0-M15.

#+BEGIN_SRC text 
$ jarget mvn -pull org.jfree/jfreechart/1.0.17,org.scalaz/scalaz-core_2.11/7.3.0-M15
Downloading ---------------------
PackData(org.jfree,jfreechart,1.0.17)
PackData(org.jfree,jcommon,1.0.21)
PackData(xml-apis,xml-apis,1.3.04)
----------------------------------
Package path = PackData(org.jfree,jfreechart,1.0.17)
Downloading file /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.pom.
Package path = PackData(org.jfree,jcommon,1.0.21)
Package path = PackData(xml-apis,xml-apis,1.3.04)
Downloading file /home/archbox/.jarget/cache/org/jfree/jcommon/1.0.21/jcommon-1.0.21.pom.
Downloading file /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.pom.
File /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.pom downloaded. Ok.
Downloading file /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.jar.
File /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.pom downloaded. Ok.
.... ... ... 
Download Successful
#+END_SRC

Show packages in cache: 

#+BEGIN_SRC sh 
$ jarget cache -pack
org.scala-lang/scala-library
xml-apis/xml-apis
org.scala-lang.modules/scala-java8-compat_2.11
org.scalaz/scalaz-core_2.11
org.jfree/jcommon
org.jfree/jfreechart

#+END_SRC

**** Copy packages from cache to local directory 

This command copies a package from cache to ./lib directory. The
packages are downloaded if not available in the cache directory yet.

 - =$ jarget mvn -copy <pack1,pack2,pack3...>=

#+BEGIN_SRC sh 
$ jarget mvn -copy org.jfree/jfreechart/1.0.17,org.scalaz/scalaz-core_2.11/7.3.0-M15

Copying jfreechart-1.0.17.jar to ./lib
Copying jcommon-1.0.21.jar to ./lib
Copying xml-apis-1.3.04.jar to ./lib
Copying scalaz-core_2.11-7.3.0-M15.jar to ./lib
Copying scala-library-2.11.11.jar to ./lib
Copying scala-java8-compat_2.11-0.7.0.jar to ./lib

$ ls lib/
jcommon-1.0.21.jar                 scala-library-2.11.11.jar
jfreechart-1.0.17.jar              scalaz-core_2.11-7.3.0-M15.jar
scala-java8-compat_2.11-0.7.0.jar  xml-apis-1.3.04.jar

#+END_SRC

**** Clean cache removing all packages 

 - =$ jarget mvn -clear=

#+BEGIN_SRC sh 
$ jarget mvn -clear 
Cleaning cache
Removing file: /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.pom
Removing file: /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar

                           ... ... ... ... ... 

Deleting directory: /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04
Deleting directory: /home/archbox/.jarget/cache/xml-apis/xml-apis
Deleting directory: /home/archbox/.jarget/cache/xml-apis
Deleting directory: /home/archbox/.jarget/cache
#+END_SRC

**** Execute program with packages classpath 
***** Command 

 - =$ jarget <pack1,pack2, ...> -- program arg1 arg2 arg2 ...=

It will execute a program with arguments arg1, arg2 and arg3 passing
the option =-cp <classpath of pack1,pack2,..,packn>=, where (-cp)
argument is the class path of the packages pack1,pack2... from the
cache directory ~/.jarget/cache, to it. So the program will be
executed with:

 - =$ program -cp <classpath of pack1,pack2...> arg1 arg2 arg3 ...=

The packages are downloaded to cache if not available yet. 

***** Example: Running scala with a set of packages in classpath

Example: Run Scala with [[https://mvnrepository.com/artifact/org.typelevel/cats-core_2.12/0.9.0][org.typelevel/cats-core_2.12/0.9.0]]

#+BEGIN_SRC sh 
$ jarget exec org.typelevel/cats-core_2.12/0.9.0 -- scala 
Downloading ---------------------
PackData(org.typelevel,cats-macros_2.12,0.9.0)
PackData(org.typelevel,cats-kernel_2.12,0.9.0)
PackData(org.typelevel,cats-core_2.12,0.9.0)
PackData(com.github.mpilquist,simulacrum_2.12,0.10.0)
PackData(org.typelevel,machinist_2.12,0.6.1)
PackData(org.scala-lang,scala-library,2.12.1)
----------------------------------
Package path = PackData(org.typelevel,cats-macros_2.12,0.9.0)
Downloading file /home/archbox/.jarget/cache/org/typelevel/cats-macros_2.12/0.9.0/cats-macros_2.12-0.9.0.pom.
Package path = PackData(org.typelevel,cats-kernel_2.12,0.9.0)
Package path = PackData(org.typelevel,cats-core_2.12,0.9.0)
Package path = PackData(com.github.mpilquist,simulacrum_2.12,0.10.0)
Package path = PackData(org.typelevel,machinist_2.12,0.6.1)
Package path = PackData(org.scala-lang,scala-library,2.12.1)
Downloading file /home/archbox/.jarget/cache/org/typelevel/cats-kernel_2.12/0.9.0/cats-kernel_2.12-0.9.0.pom.
Downloading file /home/archbox/.jarget/cache/com/github/mpilquist/simulacrum_2.12/0.10.0/simulacrum_2.12-0.10.0.pom.
Downloading file /home/archbox/.jarget/cache/org/typelevel/cats-core_2.12/0.9.0/cats-core_2.12-0.9.0.pom.
File /home/archbox/.jarget/cache/org/typelevel/cats-macros_2.12/0.9.0/cats-macros_2.12-0.9.0.pom downloaded. Ok.
Downloading file /home/archbox/.jarget/cache/org/typelevel/cats-macros_2.12/0.9.0/cats-macros_2.12-0.9.0.jar.

... ... ... ... ... 

Download Successful
Welcome to Scala 2.12.3 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_144).
Type in expressions for evaluation. Or try :help.

scala> 

scala>  import cats._, cats.instances.all._ 
import cats._
import cats.instances.all._

scala>  val len: String => Int = _.length
len: String => Int = $$Lambda$1041/28318221@2ed71727

scala> 

scala> Functor[List].map(List("scala", "cats")) (len)
res0: List[Int] = List(5, 4)

scala> 

#+END_SRC

***** Example: Running scalac with ase packages in classpath 

*Run script with scala and dependencies*

It runs the script [[file:scripts/chartTest.scala][scripts/chartTest.scala]] with jfreechart
library in passed to scala classpath. 

#+BEGIN_SRC sh 
$ jarget exec org.jfree/jfreechart/1.0.17 -- scala scripts/chartTest.scala 
#+END_SRC

The command above runs: 

#+BEGIN_SRC sh 
scala -cp <classpath of  org.jfree/jfreechart/1.0.17> scripts/chartTest.scala 
#+END_SRC

*Compile scala program with dependencies* 

#+BEGIN_SRC sh 
$ jarget exec org.jfree/jfreechart/1.0.17 -- scalac scripts/chartTest.scala -d chart.jar 

$ file chart.jar 
chart.jar: Java archive data (JAR)

# Run the program:
$ jarget exec org.jfree/jfreechart/1.0.17 -- scala chart.jar 

#+END_SRC

*** Cache commands 
**** Show cache path 

 - =$ jarget cache -path=

Example: 

#+BEGIN_SRC sh 
$ jarget cache -path
/home/archbox/.jarget/cache

$ tree $(jarget cache -path)
/home/archbox/.jarget/cache
├── com
│   └── github
│       └── mpilquist
│           └── simulacrum_2.12
│               └── 0.10.0
│                   ├── simulacrum_2.12-0.10.0.jar
│                   └── simulacrum_2.12-0.10.0.pom
└── org
    ├── scala-lang
    │   └── scala-library
    │       └── 2.12.1
    │           ├── scala-library-2.12.1.jar
    │           └── scala-library-2.12.1.pom
    └── typelevel
        ├── cats-core_2.12
        │   └── 0.9.0
        │       ├── cats-core_2.12-0.9.0.jar
        │       └── cats-core_2.12-0.9.0.pom
        ├── cats-kernel_2.12
        │   └── 0.9.0
        │       ├── cats-kernel_2.12-0.9.0.jar
        │       └── cats-kernel_2.12-0.9.0.pom
        ├── cats-macros_2.12
        │   └── 0.9.0
        │       ├── cats-macros_2.12-0.9.0.jar
        │       └── cats-macros_2.12-0.9.0.pom
        └── machinist_2.12
            └── 0.6.1
                ├── machinist_2.12-0.6.1.jar
                └── machinist_2.12-0.6.1.pom
#+END_SRC

**** Show all packages in cache 

 - =$ jarget cache -pack=

#+BEGIN_SRC sh 
$ jarget cache -pack 
org.scala-lang/scala-library
org.typelevel/cats-core_2.12
org.typelevel/cats-macros_2.12
org.typelevel/cats-kernel_2.12
org.typelevel/machinist_2.12
com.github.mpilquist/simulacrum_2.12

#+END_SRC

**** Show all versions of a given package in cache 

 - =$ jarget cache -pack <pack>=

Example: 

#+BEGIN_SRC sh 
$ jarget cache -pack 
org.scala-lang/scala-library
org.typelevel/cats-core_2.12
org.typelevel/cats-macros_2.12
org.typelevel/cats-kernel_2.12
org.typelevel/machinist_2.12
com.github.mpilquist/simulacrum_2.12

$ jarget cache -pack  org.typelevel/cats-core_2.12
Uri = /home/archbox/.jarget/cache/org/typelevel/cats-core_2.12/0.9.0/cats-core_2.12-0.9.0.pom
Package:         Cats core
Packaging:       jar
Coordinates[1]:  group = org.typelevel artifact = cats-core_2.12 version = 0.9.0
Coordinates[2]:  org.typelevel/cats-core_2.12/0.9.0
Url:             https://github.com/typelevel/cats

Description:     
Cats core
-----------------------------------------------




org.typelevel/cats-core_2.12/0.9.0

#+END_SRC

**** Show all jar packages in cache

#+BEGIN_SRC sh 
$ jarget cache -jars
/home/archbox/.jarget/cache/org/typelevel/cats-macros_2.12/0.9.0/cats-macros_2.12-0.9.0.jar
/home/archbox/.jarget/cache/org/typelevel/machinist_2.12/0.6.1/machinist_2.12-0.6.1.jar
/home/archbox/.jarget/cache/org/typelevel/cats-core_2.12/0.9.0/cats-core_2.12-0.9.0.jar
/home/archbox/.jarget/cache/org/typelevel/cats-kernel_2.12/0.9.0/cats-kernel_2.12-0.9.0.jar
/home/archbox/.jarget/cache/org/scala-lang/scala-library/2.12.1/scala-library-2.12.1.jar
/home/archbox/.jarget/cache/com/github/mpilquist/simulacrum_2.12/0.10.0/simulacrum_2.12-0.10.0.jar

#+END_SRC

*** Scripting with jarget 
    :PROPERTIES:
    :ID:       b900cee2-b19f-41ae-8ad6-006ab37b9dfc
    :END:
**** Overview 

Jarget can be used to run scala scripts with java packages
dependencies by downloading them if they are not available in the
jarget package cache file:~/.jarget/cache. 

**** Example 1 - Script with JFreeChart 
     :PROPERTIES:
     :ID:       cbb743e4-f9a8-4784-be27-b8c0e9599f8b
     :END:

Example: [[file:scripts/chartScript.sh]]

#+BEGIN_SRC scala :tangle scripts/chartScript.sh
  #!/bin/sh
  DEPS=org.jfree/jfreechart/1.0.17
  exec jarget script "$DEPS" -- "$0" "$@"
  !#

  import org.jfree.chart.{ChartPanel, ChartFactory, JFreeChart, ChartUtilities}
  import org.jfree.data.general.DefaultPieDataset

  object Main{

    def main(args: Array[String]){
      val dataset = new DefaultPieDataset()

      dataset.setValue("A", 75)
      dataset.setValue("B", 10)
      dataset.setValue("C", 10)
      dataset.setValue("D", 5)

      val chart = ChartFactory.createPieChart(
         "Sample Pie Chart", // Title
         dataset,            // Dataset 
         true,               // Show legend
         true,               // Tooltips on
         false 
       )

      // Save chart to a png file
      //---------------------------
      ChartUtilities.saveChartAsPNG(new java.io.File("mychart.png"), chart, 500, 500)

       // Show Chart in a Java Swing Frame
       //--------------------------------------
      val frame = new javax.swing.JFrame()
      frame.add(new ChartPanel(chart))
      frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE)
      frame.setSize(693, 513)
      frame.setTitle("Sample Pie Chart")
      frame.setVisible(true)
    }

  }

#+END_SRC

Running the scala script: It is assumed that jarget is in any directory
listed in '$PATH' variable.

#+BEGIN_SRC sh 
  # Make the script executable
  $ chmod +x chartScript.sh 

  # As the dependency jfree chart package has not been downloaded yet,
  # jarget will download it to the cache directory and run the scala script 'chartScript.scala'
  # passing the dependency in the classpath parameter. 
  #
  $ ./chartScript.sh 
  Downloading ---------------------
  PackData(org.jfree,jfreechart,1.0.17)
  PackData(org.jfree,jcommon,1.0.21)
  PackData(xml-apis,xml-apis,1.3.04)
  ----------------------------------
  Package path = PackData(org.jfree,jfreechart,1.0.17)
  Downloading file /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.pom.
  Package path = PackData(org.jfree,jcommon,1.0.21)
  Package path = PackData(xml-apis,xml-apis,1.3.04)
                              ... ... ... ... ... 
  File /home/archbox/.jarget/cache/org/jfree/jcommon/1.0.21/jcommon-1.0.21.jar downloaded. Ok.
  File /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.jar downloaded. Ok.
  Download Successful


  # When the scala script is run again and the dependencies are in the
  # cache directory ~/.jarget/cache, the dependencies no longer needs to
  # be downloaded and the script is executed immediately by passing the
  # dependencies' classpath to scala runtime.
  #
  $ ./chartScript.sh
#+END_SRC
**** Example 2 - Script that generates QRCode 
     :PROPERTIES:
     :ID:       121d73f6-37d4-4a7d-9774-9092d7bf23a9
     :END:

This script generates a [[https://en.wikipedia.org/wiki/QR_code][QRCode]] from argument passed from command line
saving it to an image file or showing it with a JFrame window.

File: [[file:scripts/qrcode.sh][file:scripts/qrcode.sh]]

#+BEGIN_SRC scala  :tangle scripts/qrcode.sh   :tangle-mode (identity #o755) :padline no
  #!/bin/sh
  DEPS=com.google.zxing/core/2.2,com.google.zxing/javase/2.2
  exec jarget script "$DEPS" -- "$0" "$@"
  !#

  object QRCode { 

    import javax.imageio.ImageIO;
    import java.io._
    import java.util.HashMap
    import com.google.zxing.{BarcodeFormat, BinaryBitmap, EncodeHintType, MultiFormatReader}
    import com.google.zxing.{MultiFormatWriter, NotFoundException, Result, WriterException}
    import com.google.zxing.client.j2se.MatrixToImageWriter
    import com.google.zxing.common.{ BitMatrix, HybridBinarizer}
    import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel

    def writeToFile(
      data:    String,
      file:    String  = "out.png",
      width:   Int     = 200,
      height:  Int     = 200,
      charset: String  = "UTF-8") = {
      val hintMap = {
        val h = new HashMap[EncodeHintType, ErrorCorrectionLevel]();
        h.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        h
      }
      val matrix = new MultiFormatWriter().encode(
        new String(data.getBytes(charset), charset),
        BarcodeFormat.QR_CODE, width, height, hintMap)
      MatrixToImageWriter.writeToFile(matrix, "png", new File(file));
    }


    def writeToImage(
      data:    String,
      width:   Int     = 200,
      height:  Int     = 200,
      charset: String  = "UTF-8" ): java.awt.image.BufferedImage = {
      val hintMap = {
        val h = new HashMap[EncodeHintType, ErrorCorrectionLevel]();
        h.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        h
      }
      val matrix = new MultiFormatWriter().encode(
         new String(data.getBytes(charset), charset),
        BarcodeFormat.QR_CODE, width, height, hintMap)
      MatrixToImageWriter.toBufferedImage(matrix)
    }


    /** Show QR code in a JFrame */
    def show(
      data:    String,
      width:   Int         = 200,
      height:  Int         = 200,
      charset: String      = "UTF-8",
      title:   String      = "QRCode",
      exitOnClose: Boolean = false
    ) = {
      import javax.swing.{ImageIcon, JFrame, JLabel, JPanel}
      val bimg  = writeToImage(data, width, height, charset)
      val frame = new javax.swing.JFrame("Frame 1")
      frame.setSize(400, 400)
      val pic = new javax.swing.JLabel(new ImageIcon(bimg))
      frame.add(pic)
      if (exitOnClose)
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE)
      frame.setVisible(true)
    }

  } // ------- End of Object QRCode ------------ // 


  val testUrl = "https://msdn.microsoft.com/en-us/library/ff798384.aspx"

  args.toList match { 
    case List("-show", data)
        => QRCode.show(data, exitOnClose = true)
    case List("-file", data, file)
        => QRCode.writeToFile(data, file)

    case List("-test1")
        => {
          println("Generating QRcode for testing URL: " + testUrl)
          QRCode.show(testUrl, exitOnClose = true)
        }

    case List("-test2")
        => {
          println("Generating QRcode image file images/qrcodeTest.png for testing URL: " + testUrl)
          QRCode.writeToFile(testUrl, "images/qrcodeTest.png")
        }

    case _
        => {
          println("Valid commands")
          println("$ jqrcode -file <file> <data>")
          println("$ jqrcode -show <data>")
        }   
  }

#+END_SRC

*Running*

#+BEGIN_SRC sh 
$ scripts/qrcode.sh 
Valid commands
$ jqrcode -file <file> <data>
$ jqrcode -show <data>
#+END_SRC

*Generating image with QRcode.*

It will generate a QRCode shown in the image below containing "Hello
world QRCode". The script dependencies are downloaded to the cache
directory if they are not available yet. 

#+BEGIN_SRC sh 
$ scripts/qrcode.sh -file "Hello world QRCode" images/qrcode.png
Downloading ---------------------
PackData(com.google.zxing,core,2.2)
----------------------------------
Package path = PackData(com.google.zxing,core,2.2)
Downloading file /home/archbox/.jarget/cache/com/google/zxing/core/2.2/core-2.2.pom.
File /home/archbox/.jarget/cache/com/google/zxing/core/2.2/core-2.2.pom downloaded. Ok.
Downloading file /home/archbox/.jarget/cache/com/google/zxing/core/2.2/core-2.2.jar.
File /home/archbox/.jarget/cache/com/google/zxing/core/2.2/core-2.2.jar downloaded. Ok.
Download Successful
Downloading ---------------------
PackData(com.google.zxing,javase,2.2)
----------------------------------
Package path = PackData(com.google.zxing,javase,2.2)
Downloading file /home/archbox/.jarget/cache/com/google/zxing/javase/2.2/javase-2.2.pom.
File /home/archbox/.jarget/cache/com/google/zxing/javase/2.2/javase-2.2.pom downloaded. Ok.
Downloading file /home/archbox/.jarget/cache/com/google/zxing/javase/2.2/javase-2.2.jar.
File /home/archbox/.jarget/cache/com/google/zxing/javase/2.2/javase-2.2.jar downloaded. Ok.
Download Successful

#+END_SRC

File: images/qrcode.png

[[file:images/qrcode.png]]  

*Show QRcode in a window* 

#+BEGIN_SRC sh
$ scripts/qrcode.sh -show "Hello world QRCode" 

$ scripts/qrcode.sh -test1 
Generating QRcode for testing URL: https://msdn.microsoft.com/en-us/library/ff798384.aspx

$  scripts/qrcode.sh -test2 
Generating QRcode image file images/qrcodeTest.png for testing URL: https://msdn.microsoft.com/en-us/library/ff798384.aspx
#+END_SRC

*** Command to manipulate Jar packages
**** Show manifest file 

 - =$ jarget jar [jar]=

#+BEGIN_SRC sh 
$ jarget jar -manifest lib/jfreechart-1.0.17.jar 

Manifest-Version: 1.0
Ant-Version: Apache Ant 1.8.2
Created-By: 1.7.0_21-b12 (Oracle Corporation)
Specification-Title: JFreeChart
Specification-Version: 1.0.17
Specification-Vendor: jfree.org
Implementation-Title: JFreeChart
Implementation-Version: 1.0.17
Implementation-Vendor: jfree.org

#+END_SRC

**** Show contents of single file 

 - =$ jarget jar -cat [jar] [file]=

#+BEGIN_SRC sh 
  $ jarget jar -cat lib/jfreechart-1.0.17.jar META-INF/MANIFEST.MF

  Manifest-Version: 1.0
  Ant-Version: Apache Ant 1.8.2
  Created-By: 1.7.0_21-b12 (Oracle Corporation)
  Specification-Title: JFreeChart
  Specification-Version: 1.0.17
  Specification-Vendor: jfree.org
  Implementation-Title: JFreeChart
  Implementation-Version: 1.0.17
  Implementation-Vendor: jfree.org

  ... .... ... .... ... .... ... .... ... ....

  $ jarget jar -cat lib/jfreechart-1.0.17.jar org/jfree/chart/plot/LocalizationBundle_pt_PT.properties
  # org.jfree.chart.ChartPanel ResourceBundle properties file - portuguese version
  # 
  # Changes (from 09-Set-2003)
  # --------------------------
  # 09-Set-2003 : Initial version (Eduardo Ramalho);
  #

  Category_Plot=Barras
  Combined_Domain_XYPlot=Curvas combinadas pela abcissa
  Combined_Range_XYPlot=Curvas combinadas pela ordenada
  Compass_Plot=Compasso
  Contour_Plot=Contours
  Fast_Scatter_Plot=Dispers\u00E3o
  Meter_Plot=N\u00EDvel
  Period_Marker_Plot=Period Marker Plot
  Pie_Plot=Sectores
  Thermometer_Plot=Term\u00a2metro
  XY_Plot=Curvas
  Pie_3D_Plot=Sectores 3D
  Too_many_elements=Too many elements

  # points of the compass
  N=N
  E=E
  S=S
  W=W


#+END_SRC

**** List all files 
 
 - =$ jarget jar -show [jar]=

#+BEGIN_SRC sh 
$ jarget jar -show jarget.jar 

META-INF/MANIFEST.MF
PackData.class
PackData$.class
PomData.class
PomData$.class
Utils.class
Utils$.class
JarUtils.class
JarUtils$.class
Packget.class
Packget$.class
Main.class
Main$.class
Packget$$anonfun$downloadPackage$4.class
Packget$$anonfun$downloadPackage$5.class

#+END_SRC

**** List resource/asset files 

 - =$ jarget jar -resource [jar]=

Show all resource files disregarding *.class files. 

#+BEGIN_SRC sh 
$ jarget jar -resource lib/jfreechart-1.0.17.jar 
META-INF/MANIFEST.MF
org/jfree/chart/LocalizationBundle.properties
org/jfree/chart/LocalizationBundle_cs.properties
org/jfree/chart/LocalizationBundle_de.properties
org/jfree/chart/LocalizationBundle_es.properties
org/jfree/chart/LocalizationBundle_fr.properties
org/jfree/chart/LocalizationBundle_it.properties

 ... ... ... ...  ... ... ... ...  ... ... ... ... 

org/jfree/chart/plot/LocalizationBundle_ru.properties
org/jfree/chart/plot/LocalizationBundle_zh_CN.properties
#+END_SRC

 - =$ jarget jar -resource [jar] [file]=

Show a particular resource file.

#+BEGIN_SRC text 
$ jarget jar -resource lib/jfreechart-1.0.17.jar org/jfree/chart/LocalizationBundle.properties

# org.jfree.chart.ChartPanel ResourceBundle properties file
# 
# Changes (from 31-Aug-2003)
# --------------------------
# 31-Aug-2003 : Initial version (AL);
#

Auto_Range=Auto Range
All_Axes=Both Axes
Chart=Chart
Chart_Properties=Chart Properties
Copy=Copy
Domain_Axis=Domain Axis
FILE_EXISTS_CONFIRM_OVERWRITE=The file already exists, are you sure you want to overwrite it?
PNG_Image_Files=PNG Image Files
PDF_Files=PDF Files
Print...=Print...
Properties...=Properties...
Range_Axis=Range Axis
Save_as...=Save as...
SVG_Files=SVG Files
Zoom_In=Zoom In
Zoom_Out=Zoom Out
#+END_SRC

**** Extract file to current directory

 - =jarget jar -extract [jar] [file]=

Extract file from jar to current directory.

#+BEGIN_SRC sh 
$ jarget jar -extract lib/jfreechart-1.0.17.jar META-INF/MANIFEST.MF

$ cat MANIFEST.MF 
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.8.2
Created-By: 1.7.0_21-b12 (Oracle Corporation)
Specification-Title: JFreeChart
Specification-Version: 1.0.17
Specification-Vendor: jfree.org
Implementation-Title: JFreeChart
Implementation-Version: 1.0.17
Implementation-Vendor: jfree.org


#+END_SRC
**** Extract file to a directory 

 - =jarget jar -extract [jar] [file] [path]=

Extract file META-INF/MANIFEST.MF from jfreechart-1.0.17.jar to path ./lib.

#+BEGIN_SRC sh 
$ jarget jar -extract lib/jfreechart-1.0.17.jar META-INF/MANIFEST.MF lib

$ cat lib/MANIFEST.MF 
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.8.2
Created-By: 1.7.0_21-b12 (Oracle Corporation)
Specification-Title: JFreeChart
Specification-Version: 1.0.17
Specification-Vendor: jfree.org
Implementation-Title: JFreeChart
Implementation-Version: 1.0.17
Implementation-Vendor: jfree.org

#+END_SRC
**** Convert a jar file to executable jar file 

 - =$ jarget uber -exjar [application.jar] [application.jsh]=

Generates an *nix executable ./application.jsh from the file
application.jar that can be run with =$ java -jar application.jar=

 - =$ jaget uber -exjar [application.jar]= 

Generates the *nix executable ./application from application.jar file.

Note: Those commands create a unix shell script with a jar payload
that can be run as an ordinary unix executable with ./app instead of
=$ java -jar app.jar=.

Example: Generate a *nix executable (runnable or self-executable jar
file) named proguard from proguard.jar.

#+BEGIN_SRC sh 
$ java -jar proguard.jar 
ProGuard, version 5.3.3
Usage: java proguard.ProGuard [options ...]

$ jarget uber -exjar proguard.jar 
Built proguard
Run it with ./proguard

$ ./proguard 
ProGuard, version 5.3.3
Usage: java proguard.ProGuard [options ...]

$ proguard 
bash: proguard: command not found

#   If the app is moved to some directory in $PATH variable, 
# it can be ran without forward slash (/) as any ordinary unix app 
# such as ls, echo, ps, ... 
$ mv proguard ~/bin

$ proguard 
ProGuard, version 5.3.3
Usage: java proguard.ProGuard [options ...]

$ which proguard 
/home/archbox/bin/proguard

# Check the file type 
##
$ file /home/archbox/bin/proguard
/home/archbox/bin/proguard: a /usr/bin/env sh script executable (binary data)

# Check the executable header 
##
$ head -n 7 /home/archbox/bin/proguard
#!/usr/bin/env sh
if [[ -z "$JAVA_HOME" ]]
then
    java -jar "$0" "$@"
else
    "$JAVA_HOME/bin/java" -jar "$0" "$@"
fi

#+END_SRC

*** Build uber Jar or executable uber jar 

#+BEGIN_SRC text 
 jarget uber [command]
 
 Commands

   -o <output file>         - (mandatory) Output jar file bundled with all dependencies.
   -m <main jar file>       - (optional)  Jar file containing main class.
   -p <pack1> <pack2> ...   - (optional)  Packages int the format <group>/<artifact>/<version>
   -j <jar1.jar> <jar2.jar> - (optional)  Single jar files that will be included in the uber jar.
   -jd <dir1> <dir2> ...    - (optional)  Directories containing jar files that will be included in the uber jar.
   -r <dir1> <dir2> ...     - (optional)  Directories containing resource files 
   -scala                   - (optional)  Bundles the scala-library.jar file with the uber.jar 
   -sh                      - (optional)  Makes the jar file as a self-executable Unix app.                                 
                                
#+END_SRC


Example: Make a scala uber-jar from the program [[file:scripts/chartTest.scala][file:scripts/chartTest.scala]] 

#+BEGIN_SRC sh 

  # Step 1 -  Compile app to jar file.
  #
  # If the dependency is not available in the cache, it will be downloaded
  # from the package default repository.
  #
  $ jarget exec org.jfree/jfreechart/1.0.17 -- scalac scripts/chartTest.scala -d chartTest.jar

  Downloading ---------------------
  PackData(org.jfree,jfreechart,1.0.17)
  PackData(org.jfree,jcommon,1.0.21)
  PackData(xml-apis,xml-apis,1.3.04)
  ----------------------------------
    ... ... ... ... ... ... ... ... ... 
  Downloading file /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar.
  File /home/archbox/.jarget/cache/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar downloaded. Ok.
  File /home/archbox/.jarget/cache/org/jfree/jcommon/1.0.21/jcommon-1.0.21.jar downloaded. Ok.
  File /home/archbox/.jarget/cache/org/jfree/jfreechart/1.0.17/jfreechart-1.0.17.jar downloaded. Ok.
  Download Successful

  # The next time the command is run, the packages will no longer be downloaded as
  # they are already in the cache directory. ~/.jarget/cache/
  #
  $ jarget exec org.jfree/jfreechart/1.0.17 -- scalac scripts/chartTest.scala -d chartTest.jar 

  # Step 2 - Run the jar file. 
  #
  $ jarget exec org.jfree/jfreechart/1.0.17 -- scala chartTest.jar 


  # Step 3 - Compile it to an uber-jar by packing dependencies.
  $ jarget uber -m chartTest.jar -o chartTest.sh -scala -sh -p org.jfree/jfreechart/1.0.17 
  Built file:  chartTest.sh ok
  Run it with: $ java -jar chartTest.sh

  # Run the uber-jar - Way 1 
  $ ./chartTest.sh 

  # Run the uber-jar - Way 2
  $ java -jar ./chartTest.sh

  # Run the uber-jar - Way 3
  $ sh ./chartTest.sh

#+END_SRC

Example: Make a scala self-executable jar for the app jarget.

#+BEGIN_SRC sh 
$ scala jarget.jar uber -scala -sh -o jarget -m jarget.jar -j /home/archbox/opt/scala-2.12.3/lib/scala-xml_2.12-1.0.6.jar 
Built file:  jarget ok
Run it with: $ java -jar jarget

# Run it 
$ ./jarget 
#+END_SRC

Explanation: 

 + -o jarget - it will generate a uber jar file named jarget

 + -m jarget.jar - Jar file containing the Main class. The manifest
   file of this file will be included in the uber jar.

 + -j .../scala-xml_2.12-1.0.6.jar  - Add this library to jar file.

 + -scala - This flag bundles the scala runtime library
   scala-library.jar with the application.

 + -sh    - Makes the application an *nix executable that can be run
   with ./application -cmd1 arg1 -cmd2 as an ordinary shell script ...
**** Classpath 


 - =$ jarget cpath -show=

Get class file of all jar files in ./lib directory.

#+BEGIN_SRC sh 
$ ./bin/jarget cpath -show
./lib/scala-library-2.12.1.jar:./lib/cats-macros_2.12-0.9.0.jar:./lib/cats-kernel_2.12-0.9.0.jar:./lib/cats-core_2.12-0.9.0.jar:./lib/machinist_2.12-0.6.1.jar:./lib/simulacrum_2.12-0.10.0.jar:.

$ scala -cp $(./bin/jarget cpath -show)
Welcome to Scala 2.12.3 (OpenJDK 64-Bit Server VM, Java 1.8.0_141).
Type in expressions for evaluation. Or try :help.

#+END_SRC

 - =$ jarget cpath -show [dir]=

Get class file of all jar files in a given directory.

#+BEGIN_SRC sh 
$ ./bin/jarget cpath -show ./lib
./lib/scala-library-2.12.1.jar:./lib/cats-macros_2.12-0.9.0.jar:./lib/cats-kernel_2.12-0.9.0.jar:./lib/cats-core_2.12-0.9.0.jar:./lib/machinist_2.12-0.6.1.jar:./lib/simulacrum_2.12-0.10.0.jar:.

#+END_SRC
**** System Information 
***** Show Enviroment Variables 

 - =$ jarget utils -env=

#+BEGIN_SRC sh 
$ jarget utils -env
   Environment Variable         Value
   ------------------------     --------------------------------------------------
   PATH                         /usr/local/sbin:/usr/local/bin:/usr/bin:/usr/li...
   XAUTHORITY                   /home/archbox/.Xauthority
   LC_MEASUREMENT               pt_BR.UTF-8
   LC_TELEPHONE                 pt_BR.UTF-8
   GDMSESSION                   xfce
   XDG_DATA_DIRS                /usr/local/share:/usr/share
   LC_TIME                      pt_BR.UTF-8
   DBUS_SESSION_BUS_ADDRESS     unix:path=/run/user/1001/bus
   XDG_CURRENT_DESKTOP          XFCE
   MAIL                         /var/spool/mail/archbox
   SSH_AGENT_PID                29199
   MOZ_PLUGIN_PATH              /usr/lib/mozilla/plugins
   COLORTERM                    truecolor
   SESSION_MANAGER              local/ghostpc:@/tmp/.ICE-unix/29194,unix/ghostp...
   LC_PAPER                     pt_BR.UTF-8
   LOGNAME                      archbox
   PWD                          /home/archbox/Documents/projects/jarget.scala
   WINDOWID                     73927890
   SHELL                        /bin/bash
   LC_ADDRESS                   pt_BR.UTF-8
   OLDPWD                       /home/archbox/test
   VISUAL                       emacs -Q -nw --no-site -eval "(progn (setq  inh...
   GTK_MODULES                  canberra-gtk-module
   XDG_SESSION_PATH             /org/freedesktop/DisplayManager/Session2
   XDG_SESSION_DESKTOP          xfce
   SHLVL                        3
   LC_IDENTIFICATION            pt_BR.UTF-8
   GLADE_CATALOG_PATH           :
   LC_MONETARY                  pt_BR.UTF-8
   DOCKER_HOST                  tcp://127.0.0.1:4243
   TERM                         xterm-256color
   XFILESEARCHPATH              /usr/dt/app-defaults/%L/Dt
   XDG_CONFIG_DIRS              /etc/xdg
   GLADE_PIXMAP_PATH            :
   XDG_SEAT_PATH                /org/freedesktop/DisplayManager/Seat0
   LANG                         en_US.utf8
   XDG_SESSION_TYPE             x11
   XDG_SESSION_ID               c87
   DISPLAY                      :0.0
   LC_NAME                      pt_BR.UTF-8
   _                            /usr/lib/jvm/default/bin/java
   XDG_GREETER_DATA_DIR         /var/lib/lightdm-data/archbox
   DESKTOP_SESSION              xfce
   USER                         archbox
   XDG_MENU_PREFIX              xfce-
   VTE_VERSION                  4803
   LC_NUMERIC                   pt_BR.UTF-8
   XDG_SEAT                     seat0
   SSH_AUTH_SOCK                /tmp/ssh-kO5hsOw4FbVp/agent.29198
   GLADE_MODULE_PATH            :
   EDITOR                       emacs -Q -nw --no-site -eval "(progn (setq  inh...
   NLSPATH                      /usr/dt/lib/nls/msg/%L/%N.cat
   QT_QPA_PLATFORMTHEME         qt5ct
   XDG_RUNTIME_DIR              /run/user/1001
   XDG_VTNR                     7
   HOME                         /home/archbox
   ------------------------     --------------------------------------------------


#+END_SRC

***** Show PATH Environment Variable 

 - =$ jarget utils -path=

#+BEGIN_SRC sh
  $ jarget utils -path
  /usr/local/sbin
  /usr/local/bin
  /usr/bin
  /usr/lib/jvm/default/bin
  /usr/bin/site_perl
  /usr/bin/vendor_perl
  /usr/bin/core_perl
  /home/archbox/opt/java/bin
  /home/archbox/opt/scala-2.11.8/bin/
  /home/archbox/bin
  /home/archbox/.local/bin
  /home/archbox/opt/cling/bin
  /home/archbox/opt/cling2
  /home/archbox/opt/eclipse
  /home/archbox/opt/fsformatting
  /home/archbox/opt/gambit-4.8.4/bin
  /home/archbox/opt/groovy-2.4.11/bin
  /home/archbox/opt/jars
  /home/archbox/opt/java/bin
  /home/archbox/opt/jdk/bin
  /home/archbox/opt/jdk1.8.0_20/bin
  /home/archbox/opt/maven/bin
  /home/archbox/opt/mobac
  /home/archbox/opt/scala/bin
  /home/archbox/opt/scala-2.12.3/bin
  /home/archbox/opt/vivaldi
  /home/archbox/opt/vscode
#+END_SRC

***** Show Java Properties 

 - =$ jarget utils -prop=

Show all Java properties from System.getProperties().

#+BEGIN_SRC sh 
$ jarget utils -prop
   Java Property                     Value
   -----------------------------     --------------------------------------------------
   java.runtime.name                 OpenJDK Runtime Environment
   sun.boot.library.path             /usr/lib/jvm/java-8-openjdk/jre/lib/amd64
   java.vm.version                   25.141-b15
   java.vm.vendor                    Oracle Corporation
   java.vendor.url                   http://java.oracle.com/
   path.separator                    :
   java.vm.name                      OpenJDK 64-Bit Server VM
   file.encoding.pkg                 sun.io
   user.country                      US
   sun.java.launcher                 SUN_STANDARD
   sun.os.patch.level                unknown
   java.vm.specification.name        Java Virtual Machine Specification
   user.dir                          /home/archbox/Documents/projects/jarget.scala
   java.runtime.version              1.8.0_141-b15
   java.awt.graphicsenv              sun.awt.X11GraphicsEnvironment
   java.endorsed.dirs                /usr/lib/jvm/java-8-openjdk/jre/lib/endorsed
   os.arch                           amd64
   java.io.tmpdir                    /tmp
   line.separator                    

   java.vm.specification.vendor      Oracle Corporation
   os.name                           Linux
   sun.jnu.encoding                  UTF-8
   java.library.path                 /usr/java/packages/lib/amd64:/usr/lib64:/lib64:...
   java.specification.name           Java Platform API Specification
   java.class.version                52.0
   sun.management.compiler           HotSpot 64-Bit Tiered Compilers
   os.version                        4.9.31-1-MANJARO
   user.home                         /home/archbox
   user.timezone                     
   java.awt.printerjob               sun.print.PSPrinterJob
   file.encoding                     UTF-8
   java.specification.version        1.8
   java.class.path                   /home/archbox/bin/jarget
   user.name                         archbox
   java.vm.specification.version     1.8
   sun.java.command                  /home/archbox/bin/jarget -system prop
   java.home                         /usr/lib/jvm/java-8-openjdk/jre
   sun.arch.data.model               64
   user.language                     en
   java.specification.vendor         Oracle Corporation
   awt.toolkit                       sun.awt.X11.XToolkit
   java.vm.info                      mixed mode
   java.version                      1.8.0_141
   java.ext.dirs                     /usr/lib/jvm/java-8-openjdk/jre/lib/ext:/usr/ja...
   sun.boot.class.path               /usr/lib/jvm/java-8-openjdk/jre/lib/resources.j...
   java.vendor                       Oracle Corporation
   file.separator                    /
   java.vendor.url.bug               http://bugreport.sun.com/bugreport/
   sun.io.unicode.encoding           UnicodeLittle
   sun.cpu.endian                    little
   sun.cpu.isalist                   
   -----------------------------     --------------------------------------------------

#+END_SRC
***** Show Path to Program 

 - =$ jarget utils -expath <program>=

#+BEGIN_SRC sh 
$ jarget utils -expath java
/usr/bin/java

$ jarget utils -expath jarget
/home/archbox/bin/jarget

#+END_SRC

***** Show Platform Information

 - jarget utils -info

#+BEGIN_SRC text 
  $ jarget utils -info

  Operating System              = Linux
  Operating System Version      = 4.14.16-200.fc26.x86_64
  Operating System Architecture = amd64
  Number of processors          = 4 cores
  Processor endianess           = little

  OS Path Separators and File Encoding

  - path.separator  = ':'
  - file.separator  = '/'
  - line.separator  =  '\n' - LF
  - file.enconding  =  UTF-8

  Java Runtime

  - java.vm.specification.version = 1.8
  - java.runtime.version          = 1.8.0_161-b14
  - java.vm.name                  = OpenJDK 64-Bit Server VM
  - java.home                     = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.fc26.x86_64/jre


#+END_SRC

** Building Instructions 
*** Build Standalone app 

Build a standalone jarget by running 

 - =$ make sh= 

#+BEGIN_SRC sh 
# Build 
$ make sh
scala jarget.jar uber -scala -sh -o bin/jarget -m jarget.jar -j /home/archbox/opt/scala/lib/scala-xml_2.12-1.0.6.jar
Built file:  bin/jarget ok
Run it with: $ java -jar bin/jarget

# Run it with 
$ ./bin/jarget 

# Or run it with 
$ java -jar bin/jarget

# Or run it with 
$ sh ./bin/jarget doc

#+END_SRC

*** Build standalone app and shrink its size with proguard

Build a standalone jarget redeucing the app size with proguard. 

 - =$ make sh-proguard=

#+BEGIN_SRC sh
# Build 
$ make sh-guard 

scala jarget.jar uber -scala -o bin/jarget-uber.jar -m jarget.jar -j /home/archbox/opt/scala/lib/scala-xml_2.12-1.0.6.jar -r assets
Built file:  bin/jarget-uber.jar ok
Run it with: $ java -jar bin/jarget-uber.jar
echo bin/jarget-uber.jar
bin/jarget-uber.jar
java -jar proguard.jar @config.pro
ProGuard, version 5.3.3
Reading input...
Reading program jar [/home/archbox/test/jarget.scala/bin/jarget-uber.jar]
Reading library jar [/home/archbox/opt/jdk1.8.0_144/jre/lib/rt.jar]
Initializing...

... ... .... ... ...  ... ... ... ... 

Shrinking...
Removing unused program classes and class elements...
  Original number of program classes: 2777
  Final number of program classes:    1117
Inlining subroutines...
Preverifying...
Writing output...
Preparing output jar [/home/archbox/test/jarget.scala/bin/jarget-pro.jar]
  Copying resources from program jar [/home/archbox/test/jarget.scala/bin/jarget-uber.jar]
scala jarget.jar uber -exjar bin/jarget-pro.jar bin/jarget
Built bin/jarget
Run it with ./bin/jarget

# Check app size 
$ du -h bin/jarget
1.7M	bin/jarget
1.7M	total

# Run it as an executable  
$ bin/jarget -v
Jarget v1.5.0

# Run it with sh 
$ sh bin/jarget -v
Jarget v1.5.0

# Run it with java 
$ java -jar bin/jarget -v
Jarget v1.5.0

$ bin/jarget utils -prop java.home
/home/archbox/opt/jdk1.8.0_144/jre

# Check the executable header 
$ head -n 7 bin/jarget

#!/usr/bin/env sh
if [[ -z "$JAVA_HOME" ]]
then
    java -jar "$0" "$@"
else
    "$JAVA_HOME/bin/java" -jar "$0" "$@"
fi


#+END_SRC

*** Install jarget tool in ~/bin 

 - =$ make install=

#+BEGIN_SRC sh 
# Build and install 
#
$ make install
scala jarget.jar uber -scala -sh -o bin/jarget -m jarget.jar -j /home/archbox/opt/scala/lib/scala-xml_2.12-1.0.6.jar
Built file:  bin/jarget ok
Run it with: $ java -jar bin/jarget
cp -v bin/jarget ~/bin
'bin/jarget' -> '/home/archbox/bin/jarget'

# Run it - Assuming that ~/bin is in $PATH. 
#
$ jarget
jarget - Tool to download jar packages.

Maven Packages / Jar Packages

 mvn -show [package]                 - Show package's information

 mvn -pom  [package]                 - Show package's pom file

... ... ... 
#+END_SRC

** Getting a Binary Release 

An fat-jar executable binary release can be downloaded from this link:

 - Most update Snapshot [[https://github.com/caiorss/jarget/raw/gh-pages/jarget][jarget Download]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.0-release/jarget][jarget v1.0]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.1-release/jarget][jarget v1.1]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.2-release/jarget][jarget v1.2]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.3-release/jarget][jarget v1.3]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.3.1-release/jarget][jarget v1.3.1]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.3.2-release/jarget][jarget v1.3.2]]

 - Release [[https://github.com/caiorss/jarget/raw/v1.4-release/jarget][jarget v1.4.0]] (5.7 MB)

From version >= 1.5 jarget will be shrunk with proguard.

 - Release [[https://github.com/caiorss/jarget/raw/v1.5-release/jarget][jarget v1.5.0]] (1.7 MB)

 - Release [[https://github.com/caiorss/jarget/raw/v1.5.1-release/jarget][jarget v1.5.1]] 

 - Release [[https://github.com/caiorss/jarget/raw/v2.0-beta-release/jarget][jarget v2.0-beta]]   - Added pacakge caching feature.

 - Release [[https://github.com/caiorss/jarget/raw/v2.0.1-beta/jarget][jarget v2.0.1-beta]] - Allows scripting with dependencies (maven coordinates).

 - Release [[https://github.com/caiorss/jarget/raw/v2.1.0-beta-release/jarget][jarget v2.1.0-beta]] - Uber-jars can be built with maven
   coordinates specifications and added more examples to
   documentation.

 - Release [[https://github.com/caiorss/jarget/raw/v2.0.2-beta-release/jarget][jarget-v2.2.0-beta]] - Fixed uber-jars shell script header
   edge-case bug and also added command jarget utils -info to show
   platform informations such as number of processors, version of
   operating system, default line separator '\r', '\n', '\r\n', path
   separator and so on. 

Or it can be downloaded with those shell commands below: 

#+BEGIN_SRC sh
$ curl -O -L https://github.com/caiorss/jarget/raw/gh-pages/jarget
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   130  100   130    0     0     28      0  0:00:04  0:00:04 --:--:--    32
100 5675k  100 5675k    0     0   490k      0  0:00:11  0:00:11 --:--:-- 1011k

$ chmod +x jarget

$ ./jarget 
jarget - Tool to download jar packages.

 -show [package]                 - Show package's information

 -pom  [package]                 - Show package's pom file

... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 
#+END_SRC

Or 

#+BEGIN_SRC sh 
$ curl -O -L https://github.com/caiorss/jarget/raw/gh-pages/jarget && chmod +x jarget && ./jarget 
#+END_SRC

On Windows the application can be executed with: 

#+BEGIN_SRC sh 
$ java -jar jarget 

jarget - Tool to download jar packages.

 -show [package]                 - Show package's information

 -pom  [package]                 - Show package's pom file

 -get  [package]                 - Download package and dependencies to ./lib

 -get  [package] -dir [path]     - Download package and dependencies to [path] directory.

... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 
#+END_SRC
** TODO Tasks 

 - [ ]  - Add search in console feature.  
 - [X]  - Add search in browser feature.
 - [X]  - Add package cache 
 - [ ]  - Show all versions of a given package available in the repository.
 - [ ]  - Support multiple repositories. 
 - [ ]  - Support project configuration file. 
 - [ ]  - Improve command line handling 
 - [ ]  - Improve error handling. 
 - [X]  - Feature to make Uber Jar 
 - [X]  - Shrink the generated uber jar using Pro-guard. 
 - [ ]  - Create a Windows exe wrapper
 - [X]  - Crypto Hash commands such as md5sum, sha256sum ... 
 - [ ]  - Improve project's web site design.
   
